/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgfinal;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Iterator;
import javax.swing.JOptionPane;
import static pkgfinal.Final.CarneIn;
import static pkgfinal.Final.CarnePost;
import static pkgfinal.Final.CarnePre;
import static pkgfinal.Final.NameIn;
import static pkgfinal.Final.NamePost;
import static pkgfinal.Final.NamePre;
import static pkgfinal.Final.ReporteMax;
import static pkgfinal.Final.arbol;

/**
 *
 * @author Davis
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Carga Masiva");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reportes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        jLabel1.setText("Menu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jButton3)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
Inicio v = new Inicio();
        v.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    ReporteIndex();
    ReporteCss();
    //ReporteJs();
    ReporteInorden();
    ReportePreorden();
    ReportePostorden();
    GenerarImagen("Inorden");
    GenerarImagen("Preorden");
    GenerarImagen("Postorden");
    JOptionPane.showMessageDialog(null, "Reportes generados en carpeta REPORTES");
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
public void ReporteIndex(){
    try {
            String ruta = "..\\REPORTES\\Index.html";
            String contenido = "<!DOCTYPE html>\n" +
            "<html>\n" +
            "    <head>\n" +
            "    <meta charset=\"utf-8\">\n" +
            "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n" +
            "    <meta name=\"viewport\" content=\"width=device-width\">\n" +
            "	<title> Chart emulation </title>\n" +
            "	<link rel=\"stylesheet\" href=\"../treant-js-master/Treant.css\">\n" +
            "	<link rel=\"stylesheet\" href=\"reporte.css\">\n" +
            "</head>\n" +
            "<body>\n" +
            "	<div class=\"chart\" id=\"OrganiseChart-simple\">\n" +
            "	</div>\n" +
            "	\n" +
            "	<script src=\"../treant-js-master/vendor/raphael.js\"></script>\n" +
            "	<script src=\"../treant-js-master/Treant.js\"></script>\n" +
            "	<script src=\"reporte.js\"></script>\n" +
            "\n" +
            "	<script>\n" +
            "		new Treant( simple_chart_config );\n" +
            "	</script>\n" +
            "\n" +
            "</body>\n" +
            "</html>";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
public void ReporteCss(){
    try {
            String ruta = "..\\REPORTES\\reporte.css";
            String contenido = "body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,p,blockquote,th,td { margin:0; padding:0; }\n" +
            "\n" +
            "\n" +
            "body { background: #fff; }\n" +
            "\n" +
            "/* optional Container STYLES */\n" +
            ".chart { height: 800px; width: 1600px; margin: 5px; margin: 5px auto; border: 3px solid #DDD; border-radius: 3px; }\n" +
            ".node { color: #9CB5ED; border: 2px solid #C8C8C8; border-radius: 3px; }\n" +
            ".node p { font-size: 20px; line-height: 20px; height: 20px; font-weight: bold; padding: 3px; margin: 0; }";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
}

public void ReporteJs(){
    try {        
            String ruta = "..\\REPORTES\\reporte.js";
            String contenido = "var simple_chart_config = {\n" +
            "	chart: {\n" +
            "		container: \"#OrganiseChart-simple\"\n" +
            "	},\n" +
            "	\n" +
            "	nodeStructure: {\n" +
            ReporteMax+
            "	}\n" +
            "};";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
}
public void ReporteInorden(){
    try {
            String ruta = "..\\REPORTES\\Inorden.txt";
            String resto="";
            for(int i=0;i<CarneIn.size()-1;i++){
            resto+=i+"[label=\""+CarneIn.get(i)+" \\n "+NameIn.get(i)+"\"]\n" +
            (i+1)+"[label=\""+CarneIn.get(i+1)+" \\n "+NameIn.get(i+1)+" \"]\n" +
            i+"->"+(i+1)+"\n";
            }
            String contenido = "digraph G {\n" +
            " node [shape=box];\n" +
            " rankdir=LR;\n" +
            resto+
            "}";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
}
public void ReportePreorden(){
    try {
            String ruta = "..\\REPORTES\\Preorden.txt";
            String resto="";
            for(int i=0;i<CarnePre.size()-1;i++){
            resto+=i+"[label=\""+CarnePre.get(i)+" \\n "+NamePre.get(i)+"\"]\n" +
            (i+1)+"[label=\""+CarnePre.get(i+1)+" \\n "+NamePre.get(i+1)+" \"]\n" +
            i+"->"+(i+1)+"\n";
            }
            String contenido = "digraph G {\n" +
            " node [shape=box];\n" +
            " rankdir=LR;\n" +
            resto+
            "}";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
}
public void ReportePostorden(){
    try {
            String ruta = "..\\REPORTES\\Postorden.txt";
            String resto="";
            for(int i=0;i<CarnePost.size()-1;i++){
            resto+=i+"[label=\""+CarnePost.get(i)+" \\n "+NamePost.get(i)+"\"]\n" +
            (i+1)+"[label=\""+CarnePost.get(i+1)+" \\n "+NamePost.get(i+1)+" \"]\n" +
            i+"->"+(i+1)+"\n";
            }
            String contenido = "digraph G {\n" +
            " node [shape=box];\n" +
            " rankdir=LR;\n" +
            resto+
            "}";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
}
public void GenerarImagen(String name){
try {
      
      String dotPath = "..\\dot.exe";
      
      String fileInputPath = "..\\REPORTES\\"+name+".txt";
      String fileOutputPath = "..\\REPORTES\\"+name+".jpg";
      
      String tParam = "-Tjpg";
      String tOParam = "-o";
        
      String[] cmd = new String[5];
      cmd[0] = dotPath;
      cmd[1] = tParam;
      cmd[2] = fileInputPath;
      cmd[3] = tOParam;
      cmd[4] = fileOutputPath;
                  
      Runtime rt = Runtime.getRuntime();
      
      rt.exec( cmd );
      
    } catch (Exception ex) {
      ex.printStackTrace();
    } finally {
    }
}
}

